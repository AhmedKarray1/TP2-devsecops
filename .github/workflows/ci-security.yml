name: CI - Build, SAST/SCA, DAST

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  MAVEN_OPTS: "-Xmx2g"

jobs:
  build:
    name: Build & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Build (skip tests)
        run: mvn -B -DskipTests package

      - name: Unit tests
        run: mvn -B test

      - name: Generate coverage report (JaCoCo)
        run: mvn -B jacoco:report

  sca_sast:
    name: SCA (Dependency-Check) + SAST (SpotBugs & Sonar)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      # Cache Dependency-Check data to reduce NVD calls
      - name: Cache Dependency-Check data
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository/org/owasp/dependency-check-data
            target/dependency-check-data
          key: ${{ runner.os }}-dc-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-dc-

      # Detect if NVD key is available (forked PRs won't have it)
      - name: Detect NVD key availability
        id: keycheck
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        shell: bash
        run: |
          if [ -n "$NVD_API_KEY" ]; then
            echo "has_key=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_key=false" >> "$GITHUB_OUTPUT"
          fi

      # Prefetch CVE DB (Dependency-Check 9.1.0 -> goal 'update-only'), with retries & delay
      - name: Dependency-Check update-only (with retries & delay)
        id: dc_update
        if: steps.keycheck.outputs.has_key == 'true'
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        shell: bash
        run: |
          set +e
          delay=15000   # 15s delay between NVD requests to avoid throttling
          attempts=3
          for i in $(seq 1 $attempts); do
            echo "Attempt $i/${attempts}: dependency-check:update-only (delay=${delay}ms)"
            mvn -B org.owasp:dependency-check-maven:update-only \
              -Dnvd.api.key="${NVD_API_KEY}" \
              -DnvdApiKey="${NVD_API_KEY}" \
              -Dnvd.api.delay=${delay}
            rc=$?
            if [ $rc -eq 0 ]; then
              echo "ok=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            echo "Update failed with code $rc. Backing off..."
            sleep $((i*15))
          done
          echo "ok=false" >> "$GITHUB_OUTPUT"
          exit 0  # don't fail here; we fallback below

      # Full SCA with NVD (blocking on CVSS >= 7) — only if update-only succeeded
      - name: OWASP Dependency-Check (SCA) — with NVD
        if: steps.keycheck.outputs.has_key == 'true' && steps.dc_update.outputs.ok == 'true'
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          mvn -B org.owasp:dependency-check-maven:check \
            -Dformat=ALL \
            -DfailBuildOnCVSS=7 \
            -Dnvd.api.key="${NVD_API_KEY}" \
            -DnvdApiKey="${NVD_API_KEY}" \
            -Dnvd.api.delay=15000

      # Fallback: secret present but NVD unreachable -> run without NVD analyzer
      - name: OWASP Dependency-Check (SCA) — fallback (NVD disabled)
        if: steps.keycheck.outputs.has_key == 'true' && steps.dc_update.outputs.ok != 'true'
        run: |
          echo "NVD unreachable after retries — running DC without NVD analyzer."
          mvn -B org.owasp:dependency-check-maven:check \
            -Dformat=ALL \
            -DfailBuildOnCVSS=7 \
            -Danalyzer.nvd.enabled=false

      # Fallback: no secret (e.g., PR from fork) -> also run without NVD
      - name: OWASP Dependency-Check (SCA) — no-secret fallback
        if: steps.keycheck.outputs.has_key != 'true'
        run: |
          echo "No NVD_API_KEY available — running DC without NVD analyzer."
          mvn -B org.owasp:dependency-check-maven:check \
            -Dformat=ALL \
            -DfailBuildOnCVSS=7 \
            -Danalyzer.nvd.enabled=false

      - name: Upload Dependency-Check reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: |
            **/dependency-check-report.*
            **/dependency-check-data/**

      # ----- SAST: SpotBugs (blocking)
      - name: SpotBugs (SAST)
        run: mvn -B com.github.spotbugs:spotbugs-maven-plugin:4.9.8.1:check

      - name: Upload SpotBugs report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-report
          path: |
            **/spotbugsXml.xml
            **/spotbugsHtml.html

      # ----- SAST: SonarQube/SonarCloud (quality gate shown on PR)
      - name: SonarScanner
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B -DskipTests package
          mvn -B test jacoco:report
          mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}"

  dast_zap:
    name: DAST - OWASP ZAP baseline on ephemeral app
    runs-on: ubuntu-latest
    needs: sca_sast
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Build & start app
        run: docker compose up -d

      - name: Wait for app
        run: |
          for i in {1..40}; do
            if curl -fsS http://localhost:8080/ >/dev/null; then
              echo "App is ready"; exit 0
            fi
            sleep 5
          done
          echo "App did not start in time"; exit 1

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.17.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          artifacts_name: 'zap-report'
          cmd_options: >
            -t http://localhost:8080
            -r zap_report.html
            -J zap_report.json
            -x zap_report.xml
            -m 5 -T 60

      - name: Fail on High/Critical ZAP alerts
        run: |
          set -e
          test -f zap_report.json || { echo "No ZAP report"; exit 1; }
          HIGH=$(grep -o '"risk": *"High"' zap_report.json | wc -l | tr -d ' ')
          CRIT=$(grep -o '"risk": *"Critical"' zap_report.json | wc -l | tr -d ' ')
          echo "ZAP High=$HIGH, Critical=$CRIT"
          if [ "$HIGH" -gt 0 ] || [ "$CRIT" -gt 0 ]; then
            echo "Failing due to High/Critical ZAP findings"; exit 1
          fi

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap_report.html
            zap_report.json
            zap_report.xml

      - name: Teardown
        if: always()
        run: docker compose down -v
