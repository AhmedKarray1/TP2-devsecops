name: CI - Build, SAST/SCA, DAST

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  MAVEN_OPTS: "-Xmx2g"

jobs:
  build:
    name: Build & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      # IMPORTANT: skip Dependency-Check here to avoid double-scanning
      - name: Build (skip tests)
        run: mvn -B -DskipTests -Ddependency-check.skip=true package

      - name: Unit tests
        run: mvn -B -Ddependency-check.skip=true test

      - name: Generate coverage report (JaCoCo)
        run: mvn -B -Ddependency-check.skip=true jacoco:report

  sca-dependency-check:
    name: SCA - OWASP Dependency-Check (CLI)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      # Cache DC CLI data dir (speeds up NVD downloads; survives across runs)
      - name: Cache Dependency-Check Data
        uses: actions/cache@v4
        with:
          path: |
            ~/.org.owasp.dependencycheck
          key: ${{ runner.os }}-dccli-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-dccli-

      - name: Install Dependency-Check CLI
        run: |
          set -e
          DC_VER=12.1.0
          wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v${DC_VER}/dependency-check-${DC_VER}-release.zip
          unzip -q dependency-check-${DC_VER}-release.zip
          sudo mv dependency-check /usr/local/bin/dependency-check

      # Run DC CLI; use NVD key if available, otherwise proceed without it.
      # Also add a delay to avoid 403/429 rate limits when the key is present.
      - name: Run Dependency-Check
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          set -e
          mkdir -p reports
          EXTRA_FLAGS=""
          if [ -n "$NVD_API_KEY" ]; then
            echo "Using NVD API key with delay 15s to avoid throttling."
            EXTRA_FLAGS="--nvdApiKey $NVD_API_KEY --nvdApiDelay 15000"
          else
            echo "No NVD API key provided (fork PRs or not configured). Proceeding without it."
          fi

          /usr/local/bin/dependency-check/bin/dependency-check.sh \
            --project "MyProject" \
            --scan . \
            --out reports \
            --format "HTML" \
            --format "JSON" \
            --format "XML" \
            --disableOssIndex \
            $EXTRA_FLAGS

      - name: Upload SCA Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

      # Optional: fail build on high CVSS (adjust threshold)
      - name: Fail on High/Critical (CVSS >= 7)
        run: |
          set -e
          test -f reports/dependency-check-report.json || { echo "No report found"; exit 1; }
          # Count vulnerabilities with CVSS >= 7
          HIGH_OR_CRIT=$(jq '[.dependencies[]?.vulnerabilities[]? | select(.cvssScore >= 7)] | length' reports/dependency-check-report.json)
          echo "CVSS >= 7 findings: $HIGH_OR_CRIT"
          if [ "$HIGH_OR_CRIT" -gt 0 ]; then
            echo "Failing due to High/Critical vulnerabilities (CVSS >= 7)"; exit 1
          fi

  sast:
    name: SAST - SpotBugs & Sonar
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Cache Maven repo
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: SpotBugs (SAST)
        run: mvn -B -Ddependency-check.skip=true com.github.spotbugs:spotbugs-maven-plugin:4.9.8.1:check

      - name: Upload SpotBugs report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spotbugs-report
          path: |
            **/spotbugsXml.xml
            **/spotbugsHtml.html

      - name: SonarScanner
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B -DskipTests -Ddependency-check.skip=true package
          mvn -B -Ddependency-check.skip=true test jacoco:report
          mvn -B -Ddependency-check.skip=true org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.host.url="${SONAR_HOST_URL}" \
            -Dsonar.login="${SONAR_TOKEN}"

  dast_zap:
    name: DAST - OWASP ZAP Baseline on ephemeral app
    runs-on: ubuntu-latest
    needs: [sca-dependency-check, sast]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Build & start app
        run: docker compose up -d

      - name: Wait for app
        run: |
          for i in {1..40}; do
            if curl -fsS http://localhost:8080/ >/dev/null; then
              echo "App is ready"; exit 0
            fi
            sleep 5
          done
          echo "App did not start in time"; exit 1

      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.17.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          artifacts_name: 'zap-report'
          cmd_options: >
            -t http://localhost:8080
            -r zap_report.html
            -J zap_report.json
            -x zap_report.xml
            -m 5 -T 60

      - name: Fail on High/Critical ZAP alerts
        run: |
          set -e
          test -f zap_report.json || { echo "No ZAP report"; exit 1; }
          HIGH=$(grep -o '"risk": *"High"' zap_report.json | wc -l | tr -d ' ')
          CRIT=$(grep -o '"risk": *"Critical"' zap_report.json | wc -l | tr -d ' ')
          echo "ZAP High=$HIGH, Critical=$CRIT"
          if [ "$HIGH" -gt 0 ] || [ "$CRIT" -gt 0 ]; then
            echo "Failing due to High/Critical ZAP findings"; exit 1
          fi

      - name: Upload ZAP artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            zap_report.html
            zap_report.json
            zap_report.xml

      - name: Teardown
        if: always()
        run: docker compose down -v
